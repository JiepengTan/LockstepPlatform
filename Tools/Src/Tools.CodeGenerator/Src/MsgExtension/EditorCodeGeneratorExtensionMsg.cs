using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Lockstep.Game;
using Lockstep.Serialization;
using NetMsg.Common;
using NetMsg.Server;
using Debug = Lockstep.Logging.Debug;

namespace Lockstep.CodeGenerator {
    public partial class EditorCodeGeneratorExtensionMsg : EditorBaseCodeGenerator {

        public override string prefix {
            get { return "\t\t\t"; }
        }


        protected override void ReflectRegisterTypes(){
            Type[] types = null;
            HashSet<Type> allTypes = new HashSet<Type>();
            types = GetTypes();
            var interfaceName = GenInfo.InterfaceName;
            foreach (var t in types) {
                if (!allTypes.Add(t)) continue;
                if (t.IsSubclassOf(typeof(BaseFormater)) 
                    &&t.GetCustomAttribute(typeof(SelfImplementAttribute)) == null
                    ) {
                    var interfaces = t.GetInterfaces().Where((_t) => _t.Name.Contains(interfaceName)).ToArray();
                    if (interfaces.Length > 0) {
                        RegisterType(t);
                    }
                }
            }
        }

        public override void GenerateCodeNodeData(bool isRefresh, params Type[] types){
            var ser = new CodeGenerator();
            var extensionStr = GenTypeCode(ser, new TypeHandlerMsg(this));
            var finalStr = GenFinalCodes(extensionStr, isRefresh);
            SaveFile(isRefresh, finalStr);
        }

        string GenFinalCodes(string extensionStr, bool isRefresh){
            string fileContent =
                @"//#define DONT_USE_GENERATE_CODE 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Lockstep.CodeGenerator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     https://github.com/JiepengTan/LockstepPlatform
// </auto-generated>
//------------------------------------------------------------------------------

using Lockstep.Serialization;
namespace #NAMESPACE{
#if !DONT_USE_GENERATE_CODE
//#TYPES_EXTENSIONS
#endif
}
";
            return fileContent
                    .Replace("#NAMESPACE", NameSpace)
                    .Replace("//#TYPES_EXTENSIONS", extensionStr)
                ;
        }
    }

}